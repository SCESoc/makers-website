{"project":{"metadata":{"title":"Rusty Christmas tree","startDate":"2021-12-20","bannerImage":"https://cdn.discordapp.com/attachments/444005079410802699/955980070953033798/68747470733a2f2f6d656469612e646973636f72646170702e6e65742f6174746163686d656e74732f3434343030353037393431303830323639392f3932333330383236373134333330333230382f756e6b6e6f776e2e706e67.png","description":"A LED Christmas Tree controlled by Rust. Contribute your own renderers! ","makers":[{"name":"Forest Anderson","role":"Developer","avatar":"https://avatars.githubusercontent.com/u/14791619?v=4","contactLink":"https://github.com/AngelOnFira"}],"lookingForCollaborators":true,"active":true,"connectLinks":[{"name":"Github Repo","link":"https://github.com/AngelOnFira/rusty-christmas-tree"}],"technologies":[{"name":"Rust","url":"https://www.rust-lang.org/"}],"tags":["Rust","Raspberry Pi"]},"content":"<h1>Rusty Christmas Tree</h1>\n<p>This is code that draws on the LED Christmas Tree made by\r\n<a href=\"https://github.com/aidancrowther/\">@aidancrowther</a>. You can see his 3D design\r\nfiles and Pi Pico setup code on his project\r\n<a href=\"https://github.com/aidancrowther/OpenPixelTree\">OpenPixelTree</a>.</p>\n<h2>Adding your own renderer</h2>\n<p>If any of this doesn't make sense, write an issue and I'll try to make it more\r\nclear üëç</p>\n<p>This should get you started with making something to display on the tree. There\r\nis a Nannou visualizer included so you can see what it will look like before\r\nmaking a PR. You'll be able to run this with <code>make visualize</code> from the root.</p>\n<p>To write your own code to run on the tree, you need to implement a \"renderer\". A\r\nrenderer is just a Rust module that implements a draw function, and returns a\r\n<code>TreeCanvas</code>. You can find the renderers in <a href=\"https://github.com/AngelOnFira/rusty-christmas-tree/tree/main/tree-writer/src/renderers\">this\r\nfolder</a>.\r\nHere is an example of what you'll implement:</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title hljs-function\">draw</span>(tick: <span class=\"hljs-type\">u64</span>) <span class=\"hljs-punctuation\">-></span> TreeCanvas {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">canvas</span> = TreeCanvas::<span class=\"hljs-title hljs-function hljs-invoke\">new</span>();\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">75</span> {\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">20</span> {\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">this_pixel</span> = Pixel {\r\n                r: (\r\n                    (tick <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f64</span>) <span class=\"hljs-comment\">// Start by converting the tick to a 64 bit float</span>\r\n                    .<span class=\"hljs-title hljs-function hljs-invoke\">sin</span>() <span class=\"hljs-comment\">// The sin will be between -1 and 1</span>\r\n                    .<span class=\"hljs-title hljs-function hljs-invoke\">abs</span>() <span class=\"hljs-comment\">// Get the absolute value so we are between 0 and 1</span>\r\n                    * <span class=\"hljs-number\">150.0</span> <span class=\"hljs-comment\">// Multiply by 150 to get a number between 0 and 150</span>\r\n                    + <span class=\"hljs-number\">100.0</span>\r\n                    <span class=\"hljs-comment\">// ^^ Add 100 to get a number between 100 and 250</span>\r\n                ) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>, <span class=\"hljs-comment\">// Convert the float to an 8 bit integer</span>\r\n                g: <span class=\"hljs-number\">0</span>,\r\n                b: <span class=\"hljs-number\">0</span>,\r\n            };\r\n            canvas.<span class=\"hljs-title hljs-function hljs-invoke\">set_pixel</span>(x, y, this_pixel)\r\n        }\r\n    }\r\n    canvas\r\n}\n</code></pre>\n<p>To add a new renderer, start by duplicating the <code>template</code> folder and giving it a new\r\nname. You'll then have to add code in several different places in the project:</p>\n<ul>\n<li>First, add your module\r\n<a href=\"https://github.com/AngelOnFira/rusty-christmas-tree/blob/main/tree-writer/src/renderers/mod.rs#L5\">here</a>.</li>\n<li>Second, add a new enum variant\r\n<a href=\"https://github.com/AngelOnFira/rusty-christmas-tree/blob/main/tree-data-schema/src/lib.rs#L7\">here</a>.</li>\n<li>Next, we'll have to add this new variant to several match statements\r\n<a href=\"https://github.com/AngelOnFira/rusty-christmas-tree/blob/main/tree-data-schema/src/lib.rs#L17\">here</a>,\r\n<a href=\"https://github.com/AngelOnFira/rusty-christmas-tree/blob/main/tree-writer/src/renderers/mod.rs#L13\">here</a>,\r\nand\r\n<a href=\"https://github.com/AngelOnFira/rusty-christmas-tree/blob/main/tree-writer/src/main.rs#L54\">here</a>.</li>\n<li>Finally, set the default vizualizer renderer to your new renderer\r\n<a href=\"https://github.com/AngelOnFira/rusty-christmas-tree/blob/main/tree-visualizer/src/main.rs#L38\">here</a>.</li>\n</ul>\n<p>Hopefully I get some time to fix this eventually, but I don't know how right\r\nnow. Now, you can start working in the <code>mod.rs</code> file in the new renderer folder.</p>\n<p>At this point, you should also be able to run the visualizer and see your\r\nrenderer in action.</p>\n<pre><code class=\"hljs language-bash\">make visualize\n</code></pre>\n<p>Once you have something cool, make a pull request!</p>\n<h3>Other Make Commands</h3>\n<pre><code class=\"hljs language-vbnet\"><span class=\"hljs-symbol\">build:</span> build tree-writer <span class=\"hljs-keyword\">for</span> the Raspberry Pi (requires Docker <span class=\"hljs-built_in\">and</span> cargo-cross)\r\n<span class=\"hljs-symbol\">deploy:</span> scp the <span class=\"hljs-keyword\">binary</span> <span class=\"hljs-keyword\">to</span> the Pi\r\n<span class=\"hljs-symbol\">run:</span> (build + deploy) build tree-writer <span class=\"hljs-keyword\">for</span> the Raspberry Pi <span class=\"hljs-built_in\">and</span> scp the <span class=\"hljs-keyword\">binary</span> <span class=\"hljs-keyword\">to</span> the Pi\r\n<span class=\"hljs-symbol\">visualize:</span> run the Nannou visualizer\r\nsetup-web: install the prerequisites <span class=\"hljs-keyword\">for</span> the frontend\r\n<span class=\"hljs-symbol\">frontend:</span> serve the frontend\r\nfrontend-release: serve the frontend <span class=\"hljs-keyword\">in</span> release mode\n</code></pre>\n<h2>Architecture</h2>\n<p>The plan for this project is to have many renderers implemented that show off\r\ndifferent displays (tree-writer). There will be a web server running\r\n(tree-backend) that allows you to change what is currently being displayed on\r\nthe tree. A simple web frontend (tree-frontend) will display all the options of\r\nrenderers and allow you to pick one to display.</p>\n<p>On the Raspberry Pi, there will be a process (tree-deploy) that runs the main\r\nprocess (tree-writer). The first process will look for new releases from Github\r\nperiodically. If there is a new release, it will update the and restart the main\r\nprocess.</p>\n<p>While you're developing, you can run the visualizer (tree-visualizer) to see\r\nwhat your renderer will look like on the tree.</p>\n<h3>Physical Tree</h3>\n<p>The physical tree is running on a Raspberry Pi Pico. There are 20 (actually 19)\r\nstrips running, creating 19x75 LED grid. You send data to the LED strings using\r\n<code>spidev</code>, and send 4500 8-bit numbers for each frame. Up to 33 frames can be\r\ndrawn per second. The light indexes on the tree are as follows:</p>\n<pre><code class=\"hljs\">3 4 9\r\n2 5 8\r\n1 6 7\n</code></pre>\n<h3>tree-writer</h3>\n<p>This crate is where the different \"renderers\" are implemented. A renderer is\r\njust a module that implements a draw function, and returns a <code>TreeCanvas</code>. In\r\nthis function, you can set any <code>Pixel{r: u8, g: u8, b: u8}</code> on the <code>TreeCanvas</code>.</p>\n<h3>tree-visualizer</h3>\n<p>This crate uses <a href=\"https://github.com/nannou-org/nannou\">Nannou</a> to visualize different <code>renderers</code>. It renders at the\r\nsame speed (I think:tm:) and orientation that will be displayed on the tree.</p>\n<h3>tree-backend</h3>\n<p>This crate uses <a href=\"https://github.com/seanmonstar/warp\">Warp</a> to serve a basic web server. It allows you to change the\r\nrenderer that is currently being displayed on the tree. The <code>tree-writer</code> will\r\nping this server about once a second to see if there is a new renderer to switch\r\nto.</p>\n<h3>tree-frontend</h3>\n<p>This crate uses <a href=\"https://github.com/yewproject/yew\">Yew</a> to create a basic frontend for the <code>tree-backend</code>. It will\r\njust have a list of buttons.</p>\n<h3>tree-script</h3>\n<p>This was an attempt to use the Mun scripting language as the backend for drawing\r\nto the canvas. Currently, this isn't working, but if an MVP is made, then it\r\ncould be easier to write with, and hot reloadable as well.</p>\n<h2>License</h2>\n<p>Licensed under either of</p>\n<ul>\n<li>Apache License, Version 2.0, <a href=\"http://www.apache.org/licenses/LICENSE-2.0\">LICENSE-APACHE</a></li>\n<li>MIT license <a href=\"http://opensource.org/licenses/MIT\">LICENSE-MIT</a></li>\n</ul>\n<p>at your option.</p>\n<h3>Contribution</h3>\n<p>Unless you explicitly state otherwise, any contribution intentionally\r\nsubmitted for inclusion in the work by you, as defined in the Apache-2.0\r\nlicense, shall be dual licensed as above, without any additional terms or\r\nconditions.</p>"}}